normalize()
base()

// this is actually a practice worth noting. By using variables, I can
// override normal color names with specific shades of a given color. And by
// assigning names, I can insure that there are no weird "slightly-off"
// versions of a color. Also, it makes the CSS much more readable.

// colors
blue = #062C6C
gray = #ECF0F1
orange = #D5572E

// dims
logo_height = 100px

nav
	position relative
	background blue
	line-height logo_height

	ul, li
		margin 0
		padding 0
		display inline-block

	li
		text-transform uppercase
		color white
		padding-left 10px
		font-weight bold

		&:first-child
			padding-left 0

#logo, nav
	vertical-align middle

#logo
	logo_padding = (logo_height / 6)
	content_size = logo_height - 2 * logo_padding
	size content_size
	border-radius 50%
	display inline-block
	box-sizing border-box
	padding logo_padding
	margin logo_padding

	//a 1px border would look choppy... using a shadow gives us a slight
	//antialiasing effect
	box-shadow 0 0 2px 1px orange 

	//the background image is really only the weird shape in the middle, the
	//surrounding circle can be made with pure css, bringing our image size
	//down to 1.6 kb - enough to be base64'ed and inlined. And that means 1
	//less http request & faster page load time
	background url('/img/logo.png') no-repeat center
	background-size 60% 

section
	line-height 30px
	background gray
	padding 20px

	h1
		text-transform uppercase

	&.text
		//I'm just gonna say that this is the class that gets an emblem at the
		//bottom... I'll prolly come up with a better selector later
		
